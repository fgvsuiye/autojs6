name: Create Release with Changelog

on:
  push:
    branches:
      - main # 确保这是你的主分支名称，可能是 master

jobs:
  build_and_release:
    name: Build, Package and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # 必须有此权限才能创建 Release 和上传附件

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 准备要发布的特定文件 main.js (假设它在根目录)
      # 如果 main.js 是构建产物，你需要在此之前添加构建步骤
      # 例如：
      # - name: Build main.js (if needed)
      #   run: npm run build # 或者你的构建命令

      # 3. 从 README.md 提取最新更新日志
      - name: Extract Latest Changelog from README.md
        id: changelog_extractor # 给这个步骤一个id，方便后续引用其输出
        run: |
          # 适配你的 README.md 更新日志格式
          # 1. 找到 "## 更新日志" 或 "## Changelog" 标题
          # 2. 在此之后，找到第一个以 "### V" 开头的行 (版本号标题)
          # 3. 提取该行以及后续所有以 ">" 开头的行，直到遇到下一个非 ">" 行或下一个 "###" 或 "##" 标题
          LATEST_LOGS=$(awk '
            /^## (更新日志|Changelog)/ { in_changelog_section = 1; next }
            in_changelog_section && /^### V/ { # 匹配 "### V" 开头的行
              if (found_latest_header) exit; # 如果已经找到过一个版本，则退出
              found_latest_header = 1;
              version_header = $0; # 保存版本标题行
              in_version_block = 1; # 进入版本日志块
              next;
            }
            in_changelog_section && in_version_block && /^>/ { # 匹配以 ">" 开头的日志内容行
              if (logs_content == "") {
                logs_content = version_header "\n" $0; # 首次添加版本标题和当前行
              } else {
                logs_content = logs_content "\n" $0; # 追加日志内容
              }
              next;
            }
            in_changelog_section && in_version_block && !/^>/ { # 如果在版本日志块但当前行不是以 ">" 开头
              if (logs_content != "") exit; # 如果已经收集到内容，则退出
            }
            # 如果遇到下一个主要标题或次要标题，并且已经开始收集日志，则退出
            in_changelog_section && (found_latest_header || in_version_block) && (/^## / || /^### /) {
              if (logs_content != "") exit;
            }
          ' README.md)

          if [ -z "$LATEST_LOGS" ]; then
            LATEST_LOGS="自动提取更新日志失败。请检查 README.md 中的格式或手动更新 Release 描述。"
          fi

          # GitHub Actions 处理多行字符串输出的推荐方式
          # 将换行符等特殊字符进行转义，以便正确设置为输出变量
          LATEST_LOGS="${LATEST_LOGS//'%'/'%25'}"
          LATEST_LOGS="${LATEST_LOGS//$'\n'/'%0A'}"
          LATEST_LOGS="${LATEST_LOGS//$'\r'/'%0D'}"

          echo "body_content=$LATEST_LOGS" >> "$GITHUB_OUTPUT"
        shell: bash

      # 4. 创建整个项目的 ZIP 压缩包
      - name: Create project archive
        run: zip -r project-archive.zip . -x ".git/*" -x ".github/*"

      # 5. 创建 GitHub Release 并上传文件
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # Release 的标签名，这里使用日期和时间生成一个唯一的标签
          tag_name: "release-$(date +'%Y%m%d-%H%M%S')"

          # Release 的标题，格式为 VYYYYMMDD
          name: "V$(date +'%Y%m%d')"

          # Release 的描述内容，从上一步提取
          body: ${{ steps.changelog_extractor.outputs.body_content }}

          # draft: false # 设置为 true 则创建为草稿 Release
          # prerelease: false # 设置为 true 则标记为预发布版

          # 要上传的文件列表
          files: |
            main.js
            project-archive.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}