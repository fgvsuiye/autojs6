name: Create Release with Changelog

on:
  push:
    branches:
      - main # 确保这是你的主分支名称，可能是 master

jobs:
  build_and_release:
    name: Build, Package and Release
    runs-on: ubuntu-latest
    permissions:
      contents: write # 必须有此权限才能创建 Release 和上传附件

    steps:
      # 1. 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 准备要发布的特定文件 main.js (假设它在根目录)
      # 如果 main.js 是构建产物，你需要在此之前添加构建步骤

      # 3. 从 README.md 提取最新更新日志
      - name: Extract Latest Changelog from README.md
        id: changelog_extractor
        run: |
          LATEST_LOGS=$(awk '
            /^## (更新日志|Changelog)/ { in_changelog_section = 1; next }
            in_changelog_section && /^### V/ {
              if (found_latest_header) exit;
              found_latest_header = 1;
              version_header = $0;
              in_version_block = 1;
              next;
            }
            in_changelog_section && in_version_block && /^>/ {
              if (logs_content == "") {
                logs_content = version_header "\n" $0;
              } else {
                logs_content = logs_content "\n" $0;
              }
              next;
            }
            in_changelog_section && in_version_block && !/^>/ {
              if (logs_content != "") exit;
            }
            in_changelog_section && (found_latest_header || in_version_block) && (/^## / || /^### /) {
              if (logs_content != "") exit;
            }
          ' README.md)

          if [ -z "$LATEST_LOGS" ]; then
            LATEST_LOGS="自动提取更新日志失败。请检查 README.md 中的格式或手动更新 Release 描述。"
          fi

          LATEST_LOGS="${LATEST_LOGS//'%'/'%25'}"
          LATEST_LOGS="${LATEST_LOGS//$'\n'/'%0A'}"
          LATEST_LOGS="${LATEST_LOGS//$'\r'/'%0D'}"

          echo "body_content=$LATEST_LOGS" >> "$GITHUB_OUTPUT"
        shell: bash

      # 4. 创建整个项目的 ZIP 压缩包
      - name: Create project archive
        run: zip -r project-archive.zip . -x ".git/*" -x ".github/*"

      # 5. 生成 Release 的动态值 (标签名和标题)
      - name: Generate release values
        id: release_values # 给这个步骤一个 id
        run: |
          echo "TAG_NAME=release-$(date +'%Y%m%d-%H%M%S')" >> "$GITHUB_OUTPUT"
          echo "RELEASE_TITLE=V$(date +'%Y%m%d')" >> "$GITHUB_OUTPUT"
        shell: bash

      # 6. 创建 GitHub Release 并上传文件
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          # 使用上一步生成的输出作为 tag_name 和 name
          tag_name: ${{ steps.release_values.outputs.TAG_NAME }}
          name: ${{ steps.release_values.outputs.RELEASE_TITLE }}

          # Release 的描述内容，从提取步骤获取
          body: ${{ steps.changelog_extractor.outputs.body_content }}

          # draft: false
          # prerelease: false

          files: |
            main.js
            project-archive.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}